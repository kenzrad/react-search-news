{"version":3,"sources":["utils/arrUtils.js","utils/strUtils.js","features/search/searchSlice.js","features/search/index.js","components/Nav/index.js","features/search/SearchHistory.js","features/search/SearchResults.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","reduceAndSliceArr","arr","length","reducedArr","Array","from","Set","reverse","slice","removeSpecialCharacters","str","trim","toLowerCase","replace","searchBarSlice","createSlice","name","initialState","value","history","results","reducers","setSearchValue","state","action","payload","push","setSearchResults","actions","selectSearchValue","search","selectSearchHistory","selectSearchResults","Search","dispatch","useDispatch","useState","searchQuery","setSearchQuery","submitSearch","e","query","preventDefault","type","queryTypeMap","FEATURED","SEARCH","SEARCH_DATE","url","axios","get","then","res","searchResults","data","hits","i","title","timestamp","created_at","id","objectID","author","relevancyScore","relevancy_score","catch","error","fetchArticles","className","onSubmit","aria-label","placeholder","onChange","target","Nav","href","SearchHistory","searchHistory","useSelector","join","SearchResults","articles","map","article","key","rel","App","persistConfig","storage","combineReducers","searchReducer","persistedReducer","persistReducer","store","configureStore","reducer","persistor","persistStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","loading","document","getElementById","console","log","getState","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c99fbda6.chunk.js","sourcesContent":["function reduceAndSliceArr(arr) {\n    if ( !arr || arr.length === 0 ) {\n        return arr;\n    }\n\n    let reducedArr = Array.from(new Set(arr.reverse()));\n    let slicedArr = reducedArr && reducedArr.length > 0 ? reducedArr.slice(0, 20).reverse() : [];\n    return slicedArr;\n}\n\nmodule.exports = {\n    reduceAndSliceArr,\n}","function removeSpecialCharacters(str) {\n    return str ? str.trim().toLowerCase().replace(/[^a-zA-Z0-9]/g, '') : '';\n}\n\n// would likely build anchor tags and other messages here\n\nmodule.exports = {\n    removeSpecialCharacters,\n};\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { reduceAndSliceArr } from '../../utils/arrUtils'\r\n\r\nexport const searchBarSlice = createSlice({\r\n  name: 'searchBar',\r\n  initialState: {\r\n    value: '',\r\n    history: [],\r\n    results: []\r\n  },\r\n  reducers: {\r\n    setSearchValue: (state, action) => {\r\n      state.value = action.payload;\r\n      if (!!action.payload) {\r\n        state.history.push(action.payload);\r\n        state.history = reduceAndSliceArr(state.history);\r\n      }\r\n    },\r\n    setSearchResults: (state, action) => {\r\n      state.results = action.payload;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { setSearchValue, setSearchResults } = searchBarSlice.actions;\r\n\r\nexport const selectSearchValue = state => state.search.value;\r\nexport const selectSearchHistory = state => state.search.history;\r\nexport const selectSearchResults = state => state.search.results;\r\n\r\nexport default searchBarSlice.reducer;\r\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setSearchValue, setSearchResults } from './searchSlice';\nimport axios from 'axios';\nimport { removeSpecialCharacters } from '../../utils/strUtils'\n\nexport function Search() {\n  const dispatch = useDispatch();\n  const [searchQuery, setSearchQuery] = useState('');\n\n  /**\n   * Get request to Hacker News API, add articles object to state\n   * @param {string} type - query type (e.g., search, search)\n   * @param {string} query\n   */\n  function fetchArticles(type, query) {\n    // In a full size app, I would add this as a services to a services folder so it can be easily found and reused (with an api services helper to create request url and assign methods)\n    const BASE_URL = 'https://hn.algolia.com/api/v1/';\n    // if a sorting feature is added to the search, would at to url builder (for now, always search?query unless the query is blank)\n    const queryTypeMap = {\n      FEATURED: 'search?tags=front_page',\n      SEARCH: 'search?query=',\n      SEARCH_DATE: 'search_by_date?query='\n    }\n  \n    let url = BASE_URL;\n    if (query && type && queryTypeMap[type] !== -1) {\n        url += (queryTypeMap[type] + query);\n    } else {\n        url += queryTypeMap.FEATURED;\n    }\n\n    axios.get(url).then(res => {\n      let searchResults = [];\n      if (res.data && res.data.hits) {\n        for (var i = 0; i < res.data.hits.length; i++) {\n          searchResults.push({\n            title: res.data.hits[i].title,\n            url: res.data.hits[i].url,\n            timestamp: res.data.hits[i].created_at,\n            id: res.data.hits[i].objectID,\n            author: res.data.hits[i].author,\n            relevancyScore: res.data.hits[i].relevancy_score\n          });\n        }\n      }\n      dispatch(setSearchResults(searchResults));\n    }).catch(function (error) {\n      // error log\n    });\n  }\n\n  /**\n   * Set search state values and fires api request function (handles falsey query values)\n   * @param {String} query - can be empty string\n   */\n  function submitSearch(e, query) {\n    e.preventDefault();\n    dispatch(setSearchValue(query));\n    fetchArticles('SEARCH', query);\n    setSearchQuery('');\n  };\n\n  return (\n    <form className=\"form-inline\" onSubmit={(e) => submitSearch(e, removeSpecialCharacters(searchQuery))}>\n        <input\n          className=\"form-control input-lg\"\n          aria-label=\"Search query field\"\n          value={searchQuery}\n          placeholder=\"Search Hacker News\"\n          onChange={e => setSearchQuery(e.target.value)}\n        />\n        <button \n          type=\"submit\" \n          className=\"btn btn-dark ml-2\"\n        >\n          Search\n        </button>\n    </form>\n  );\n}","import React from 'react';\nimport { Search } from '../../features/search';\n\nexport function Nav() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light mb-3\">\n            <a className=\"navbar-brand\" href=\"https://github.com/kenzrad/react-search-news\">Hacker News API Search</a>\n            <div className=\"ml-auto\"><Search /></div>\n        </nav>\n    )\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectSearchHistory} from './searchSlice';\n\nexport function SearchHistory () {\n  const searchHistory = useSelector(selectSearchHistory);\n  return (\n    <div>\n      <p className=\"text-muted text-right\">Recent searches: {searchHistory.join(', ')}</p>\n    </div>\n  );\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectSearchValue, selectSearchResults } from './searchSlice';\nimport { SearchHistory } from './SearchHistory';\n\nexport function SearchResults () {\n  const articles = useSelector(selectSearchResults);\n  const value = useSelector(selectSearchValue);\n  return (\n    <div className=\"px-2\">\n      <div className=\"row p-2\">\n        <div className=\"col\">\n          <h3>{!!value ? articles.length + ' Results for: \"' + value + '\"' : 'Top Stories' }</h3>\n        </div>\n        <div className=\"col\">\n          <SearchHistory />\n        </div>\n      </div>\n      <div className=\"row p-2 border-bottom\">\n        <div className=\"col-3\"><strong>Article ID</strong></div>\n        <div className=\"col-6\"><strong>Title/Link</strong></div>\n        <div className=\"col-3\"><strong>Author</strong></div>\n      </div>\n      {articles.map(article => (\n        <div key={article.id} className=\"row p-2 border-bottom\">\n          <div className=\"col-3\">{article.id}</div>\n          <div className=\"col-6\"><a href={article.url} target=\"_blank\" rel=\"noopener noreferrer\">{article.title}</a></div>\n          <div className=\"col-3\">{article.author}</div>\n        </div>\n      ))}\n    </div>\n  );\n}","import React from 'react';\r\nimport { Nav } from './components/Nav';\r\nimport { SearchResults } from './features/search/SearchResults';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Nav />\r\n      <SearchResults/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport searchReducer from '../features/search/searchSlice';\r\n// import { logger } from 'redux-logger';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport {combineReducers} from 'redux';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n}\r\n \r\nconst reducers = combineReducers({\r\n  search: searchReducer\r\n});\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducers)\r\n\r\n// the default serializableStateInvariant middleware throws an exception from redux-persist (although it performs as it should) - this middleware would not be included in prod environments\r\nexport const store = configureStore({\r\n  reducer: persistedReducer\r\n  // middleware: getDefaultMiddleware().concat(logger)\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { persistor, store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/lib/integration/react';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst renderApp = () => {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        <PersistGate loading={null} persistor={persistor}>\r\n          <App />\r\n        </PersistGate>\r\n      </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  );\r\n\r\n  console.log(store.getState());\r\n  \r\n};\r\n\r\nrenderApp();\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}